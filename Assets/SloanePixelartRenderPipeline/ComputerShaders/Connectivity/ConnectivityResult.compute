#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "../../Shaders/Includes/Inputs/CameraParams.hlsl"
#include "../../Shaders/Includes/Transform.hlsl"

#define BUFFER_WIDTH (_Width * _SamplingScale)
#define BUFFER_HEIGHT (_Height * _SamplingScale)

uint _SamplingScale;
int _Width;
int _Height;
#include "../../Shaders/Includes/Connectivity.hlsl"
#pragma kernel Main

Texture2D<float4> _ConnectivityMap;
RWTexture2D<float4> _ConnectivityResultBuffer;

[numthreads(8,8,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    if(id.x > uint(_Width) || id.y > uint(_Height)) return;
    int halfScale = int(_SamplingScale / 2);
    uint2 center = uint2(id.x * _SamplingScale + uint(halfScale), id.y * _SamplingScale + uint(halfScale));
    float fakeFloot = 0.0;
    int data;
    float totalConnectedCount = 0;
    float totalConnectedOrCloserCount = 0;
    float centerDepth = _DepthBuffer[center];
    #if defined(UNITY_REVERSED_Z)
    centerDepth = 1.0 - centerDepth;
    #endif
    centerDepth = LINEAR_DEPTH(centerDepth);
    float normalDiff = 0.0;

    for(int i = -halfScale; i <= halfScale; i++)
    {
        for(int j = -halfScale; j <= halfScale; j++)
        {
            uint2 coord = uint2(int2(center) + int2(i, j));
            float4 rawData = _ConnectivityMap[coord];
            float currentDepth = _DepthBuffer[coord];
            #if defined(UNITY_REVERSED_Z)
            currentDepth = 1.0 - currentDepth;
            #endif
            currentDepth = LINEAR_DEPTH(currentDepth);
            UnpackFloatInt8bit(rawData.r, 256.0, fakeFloot, data);
            int targetConnectedToCenter = (data & (1 << 5)) > 0 ? 1 : 0;

            UnpackFloatInt8bit(rawData.g, 256.0, fakeFloot, data);
            targetConnectedToCenter += (data & (1 << 5)) > 0 ? 1 : 0;

            UnpackFloatInt8bit(rawData.b, 256.0, fakeFloot, data);
            targetConnectedToCenter += (data & (1 << 5)) > 0 ? 1 : 0;

            UnpackFloatInt8bit(rawData.a, 256.0, fakeFloot, data);
            targetConnectedToCenter += (data & (1 << 5)) > 0 ? 1 : 0;

            if(targetConnectedToCenter > 0) totalConnectedCount += 1.0;
            if(targetConnectedToCenter > 0 || currentDepth < centerDepth) totalConnectedOrCloserCount += 1.0;

            float diff = CheckNormalContinuous(coord, BUFFER_WIDTH, BUFFER_HEIGHT);
            if(diff > normalDiff) normalDiff = diff;
        }
    }

    uint connectedRight = 0;
    uint closerRight = 0;
    CheckConnectedDepthNormal(center, center + int2(_SamplingScale, 0), connectedRight, closerRight, _SamplingScale);

    uint connectedLeft = 0;
    uint closerLeft = 0;
    CheckConnectedDepthNormal(center, center - int2(_SamplingScale, 0), connectedLeft, closerLeft, _SamplingScale);

    uint connectedUp = 0;
    uint closerUp = 0;
    CheckConnectedDepthNormal(center, center + int2(0, _SamplingScale), connectedUp, closerUp, _SamplingScale);

    uint connectedDown = 0;
    uint closerDown = 0;
    CheckConnectedDepthNormal(center, center - int2(0, _SamplingScale), connectedDown, closerDown, _SamplingScale);
    
    float4 output = float4(totalConnectedCount / float(_SamplingScale * _SamplingScale), totalConnectedOrCloserCount / float(_SamplingScale * _SamplingScale), 0.0, 0.0);
    output.b = normalDiff;
    output.a = PackFloatInt8bit(0.0, (connectedRight << 7) + (connectedLeft << 6) + (connectedUp << 5) + (connectedDown << 4) + (closerRight << 3) + (closerLeft << 2) + (closerUp << 1) + (closerDown << 0), 256.0);
    _ConnectivityResultBuffer[id.xy] = output;
}